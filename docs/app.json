[{"name": "app.py", "content": "# --------------------------------------------\n# Imports - PyShiny EXPRESS VERSION\n# --------------------------------------------\n\nfrom shiny import App\nfrom shiny import reactive, render\nfrom shiny.express import input, ui\nimport micropip  # For loading pandas dynamically in the browser\nimport pandas as pd  # Ensure this is here for local development\nfrom pathlib import Path\n\n########################\n# Ensure pandas is loaded in Pyodide\n########################\nasync def install_packages():\n    \"\"\"Ensure pandas is installed dynamically for Pyodide.\"\"\"\n    await micropip.install(\"pandas\")\n\n# Ensure packages are loaded before running the app\nif __name__ == \"__main__\":\n    import asyncio\n    asyncio.run(install_packages())\n# --------------------------------------------\n# Load Data\n# --------------------------------------------\n\n# Path to the dataset\ndata_path = Path(__file__).parent / \"../data/symbols_valid_meta.csv\"\ndf = pd.read_csv(data_path)\n\n# --------------------------------------------\n# Define User Interface\n# --------------------------------------------\n\nui.page_opts(\n    title=\"Stock Market Insights Dashboard\",\n    fillable=True,\n)\n\nui.h2(\"\ud83d\udcc8 Stock Market Dashboard\", class_=\"text-primary text-center\")\nui.h5(\n    \"An interactive and dynamic dashboard for exploring the stock market landscape\",\n    class_=\"text-center text-muted\",\n)\n\n# Sidebar with filtering options\nwith ui.sidebar(title=\"Filters\", open=\"open\"):\n    ui.h3(\"Filter Options\", class_=\"text-primary\")\n    ui.input_selectize(\n        \"market_category\",\n        \"Market Category:\",\n        choices=sorted(df[\"Market Category\"].dropna().unique()),\n        selected=[],\n        multiple=True,\n    )\n    ui.input_selectize(\n        \"listing_exchange\",\n        \"Listing Exchange:\",\n        choices=sorted(df[\"Listing Exchange\"].dropna().unique()),\n        selected=[],\n        multiple=True,\n    )\n    ui.input_checkbox_group(\n        \"financial_status\",\n        \"Financial Status:\",\n        choices=sorted(df[\"Financial Status\"].dropna().unique()),\n        selected=[],\n    )\n    ui.hr()\n    ui.p(\"Use the filters to customize your insights.\", class_=\"text-muted\")\n\n# Layout with Value Boxes\nwith ui.layout_column_wrap(fill=False):\n    with ui.value_box(showcase=icon_svg(\"chart-line\"), theme=\"bg-gradient-green-blue\"):\n        \"Number of Stocks\"\n\n        @render.text\n        def stock_count():\n            return f\"{filtered_df().shape[0]} stocks\"\n\n    with ui.value_box(showcase=icon_svg(\"building-columns\"), theme=\"bg-gradient-blue-purple\"):\n        \"Unique Exchanges\"\n\n        @render.text\n        def exchange_count():\n            return f\"{filtered_df()['Listing Exchange'].nunique()} exchanges\"\n\n    with ui.value_box(showcase=icon_svg(\"tags\"), theme=\"bg-gradient-yellow-orange\"):\n        \"Market Categories\"\n\n        @render.text\n        def market_category_count():\n            return f\"{filtered_df()['Market Category'].nunique()} categories\"\n\n# Chart and Table Layout\nwith ui.layout_columns():\n    # Market Category Chart\n    with ui.card(full_screen=True, theme=\"shadow\"):\n        ui.card_header(\"Market Category Distribution\", class_=\"text-primary\")\n        \n        @render_plotly\n        def market_category_chart():\n            df_filtered = filtered_df()\n            if df_filtered.empty:\n                return px.scatter(title=\"No data available\")\n            fig = px.bar(\n                df_filtered,\n                x=\"Market Category\",\n                title=\"Market Category Distribution\",\n                labels={\"Market Category\": \"Category\"},\n                color_discrete_sequence=[\"#2ca02c\"],  # Green bars\n            )\n            fig.update_layout(\n                title_font=dict(size=18, color=\"darkblue\"),\n                xaxis_title=\"Market Category\",\n                yaxis_title=\"Count\",\n                template=\"plotly_white\",\n            )\n            return fig\n\n    # Stock Data Table\n    with ui.card(full_screen=True, theme=\"shadow\"):\n        ui.card_header(\"Filtered Stock Data\", class_=\"text-primary\")\n\n        @render.data_frame\n        def stock_data_table():\n            cols = [\n                \"Symbol\",\n                \"Security Name\",\n                \"Market Category\",\n                \"Listing Exchange\",\n                \"Financial Status\",\n            ]\n            return filtered_df()[cols]\n\n# --------------------------------------------\n# Define Reactive Content\n# --------------------------------------------\n\n@reactive.calc\ndef filtered_df():\n    # Start with the full dataset\n    filt_df = df\n\n    # Filter by Market Category\n    selected_categories = input.market_category()\n    if selected_categories:\n        filt_df = filt_df[filt_df[\"Market Category\"].isin(selected_categories)]\n\n    # Filter by Listing Exchange\n    selected_exchanges = input.listing_exchange()\n    if selected_exchanges:\n        filt_df = filt_df[filt_df[\"Listing Exchange\"].isin(selected_exchanges)]\n\n    # Filter by Financial Status\n    selected_statuses = input.financial_status()\n    if selected_statuses:\n        filt_df = filt_df[filt_df[\"Financial Status\"].isin(selected_statuses)]\n\n    return filt_df\n", "type": "text"}]